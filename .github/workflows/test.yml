name: Test and Build
on: [push]

jobs:
  test:
    name: Test
    runs-on: ubuntu-20.04
    outputs:
      branch: ${{ steps.branchinfo.outputs.branch }}

    steps:
      - uses: nelonoel/branch-name@v1.0.1

      - name: Update npm until we use next LTS
        run: sudo npm install -g npm@latest

      - name: Store the branch name
        id: branchinfo
        run: echo "::set-output name=branch::${BRANCH_NAME}"

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache Cypress Binary
        id: cache-cypress-binary
        uses: actions/cache@v2
        with:
          path: cypress/cache
          key: cypress-binary-${{ hashFiles('package-lock.json') }}

      - name: ssh fix for npm install
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Dependencies
        run: npm install

      - name: Lint
        run: npx eslint --max-warnings=0 .

      - name: Unit Tests
        run: npm run test:coverage

      - name: E2E Tests
        uses: cypress-io/github-action@v2
        with:
          start: npm run start:coverage
          wait-on: "http://localhost:3000"

      - name: Merge Coverage Reports
        run: |
          ls -l ./coverage
          npm run merge-coverage
          ls -l ./coverage/merged
          ls -ld coverage/integration/lcov.info
          # cat coverage/merged/lcov.info

      - name: Codacy Coverage
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage/integration/lcov.info
        env:
          CODACY_USERNAME: brainchild-projects
          CODACY_PROJECT_NAME: printables
          CODACY_ORGANIZATION_PROVIDER: gh
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}

      # - name: Coveralls
      #   run: cat coverage/integration/lcov.info | npx coveralls
      #   env:
      #     COVERALLS_SERVICE_NAME: "Github CI"
      #     COVERALLS_GIT_BRANCH: ${{ steps.branchinfo.outputs.branch }}
      # - name: Coveralls Unit
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     path-to-lcov: "./coverage/unit/lcov.info"
      #     parallel: true
      # - name: Coveralls Integration
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     path-to-lcov: "coverage/integration/lcov.info"
      #     # parallel: true
      # - name: Coveralls Finished
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     parallel-finished: true

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: test
    if: ${{ needs.test.outputs.branch == 'main' }}
    env:
      CYPRESS_CACHE_FOLDER: cypress/cache
      CYPRESS_SKIP_BINARY_INSTALL: yes

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Update npm until we use next LTS
        run: sudo npm install -g npm@latest

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache Cypress Binary
        id: cache-cypress-binary
        uses: actions/cache@v2
        with:
          path: cypress/cache
          key: cypress-binary-${{ hashFiles('package-lock.json') }}

      - name: ssh fix for npm install
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Dependencies
        run: npm install

      - name: Get Current Version
        id: currentVersion
        run: |
          version=`node -p "require('./package.json').version"`
          echo "::set-output name=value::${version}"

      - name: Get Next Version
        id: nextVersion
        run: echo "::set-output name=value::$(npm run --silent release-version)"

      - run: echo "${{ steps.currentVersion.outputs.value }} vs ${{ steps.nextVersion.outputs.value }}"

      - name: Should We Release?
        id: shouldRelease
        run: |
          should=`[[ "${{ steps.nextVersion.outputs.value }}" != "" ]] && [[ "${{ steps.nextVersion.outputs.value }}" != "${{ steps.currentVersion.outputs.value }}" ]] && echo "yes" || echo "no"`
          echo "::set-output name=value::${should}"

      - name: Update Copyright Year
        if: steps.shouldRelease.outputs.value == 'yes'
        run: npm run --silent update-copyright-year

      - name: Build
        if: steps.shouldRelease.outputs.value == 'yes'
        run: |
          npm run build
          tar -C ./build -czvf ./release-${{ steps.nextVersion.outputs.value }}.tar.gz .

      - name: Do Release Changes
        if: steps.shouldRelease.outputs.value == 'yes'
        # NOTE: Currently runs `standard-version --prerelease`.
        #       Update the release script in package.json to change
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          npm run release

      - name: Commit Release
        if: steps.shouldRelease.outputs.value == 'yes'
        run: git push origin

      - name: Create Release
        if: steps.shouldRelease.outputs.value == 'yes'
        id: createRelease
        uses: ncipollo/release-action@v1
        with:
          artifacts: release-${{ steps.nextVersion.outputs.value }}.tar.gz
          tag: v${{ steps.nextVersion.outputs.value }}
          name: Release v${{ steps.nextVersion.outputs.value }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to Heroku
        run: git push -f https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git origin/main:main
      # - name: Repository Dispatch
      #   uses: peter-evans/repository-dispatch@v1
      #   with:
      #     repository: brainchild-projects/brainchild-projects.github.io-src
      #     token: ${{ secrets.REPO_ACCESS_TOKEN }}
      #     event-type: sites-printables-update
      #     client-payload: |
      #       {
      #         "tag": "v${{ steps.nextVersion.outputs.value }}",
      #         "url": "https://github.com/brainchild-projects/printables/releases/download/v${{ steps.nextVersion.outputs.value }}/release-${{ steps.nextVersion.outputs.value }}.tar.gz"
      #       }
